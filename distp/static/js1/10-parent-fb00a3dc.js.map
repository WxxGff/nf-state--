{"version":3,"file":"10-parent-fb00a3dc.js","sources":["../../../src/views/state-loacl/test-list.ts","../../../src/views/state-loacl/20-pager.vue","../../../src/views/state-loacl/30-find.vue","../../../src/views/state-loacl/10-parent.vue"],"sourcesContent":["import type { InjectionKey } from 'vue'\r\nimport { watch } from 'vue'\r\n\r\nimport { defineStore, useStoreLocal } from '../../../lib/main'\r\nimport type { IState } from '../../../lib/types/type'\r\n\r\nimport type { PageList } from '../../types/typs'\r\n\r\nconst flag = Symbol('pager') as InjectionKey<string>\r\n\r\n/**\r\n * 注册局部状态，父组件使用 provide\r\n * * 数据列表用\r\n * @returns\r\n */\r\nconst regListState = (): PageList & IState => {\r\n  // 定义 列表用的状态\r\n  const state = defineStore<PageList>(flag, {\r\n    state: (): PageList => {\r\n      return {\r\n        moduleId: 0, // 模块ID\r\n        meta: {}, // 列表用的各种meta：grid、pager、button、find、form\r\n        dataList: [], // 数据列表\r\n        findValue: {}, // 查询条件的精简形式\r\n        findArray: [], // 查询条件的对象形式\r\n        pagerInfo: { // 分页信息\r\n          pagerSize: 5,\r\n          count: 20, // 总数\r\n          pagerIndex: 1 // 当前页号\r\n        },\r\n        selection: { // 列表里选择的记录\r\n          dataId: '', // 单选ID number 、string\r\n          row: {}, // 单选的数据对象 {}\r\n          dataIds: [], // 多选ID []\r\n          rows: [] // 多选的数据对象 []\r\n        },\r\n        query: {} // 查询条件\r\n      }\r\n    },\r\n    getters: {\r\n    },\r\n    actions: {\r\n      /**\r\n       * 加载数据，\r\n       * @param {*} isReset true：设置总数，页号设置为1；false：仅翻页\r\n       */\r\n      async loadData (isReset = false) {\r\n        \r\n        const list = {\r\n          allCount: 10,\r\n          dataList: [{\r\n            name: '数据测试' + new Date().valueOf()\r\n          }]\r\n        }\r\n        // 使用 $state 直接赋值\r\n        this.dataList.$state = list.dataList\r\n        if (isReset) {\r\n          this.pagerInfo.count = list.allCount === 0 ? 1 : list.allCount\r\n          this.pagerInfo.pagerIndex = 1\r\n        }\r\n      }\r\n    }\r\n  },\r\n  { isLocal: true }\r\n  )\r\n\r\n  // 初始化\r\n  state.loadData(true)\r\n\r\n  // 监听页号，实现翻页功能\r\n  watch(() => state.pagerInfo.pagerIndex, () => {\r\n    state.loadData()\r\n  })\r\n\r\n  // 监听查询条件，实现查询功能。\r\n  watch(state.findValue, () => {\r\n    state.loadData(true)\r\n  })\r\n\r\n  return state\r\n}\r\n\r\n/**\r\n * 子组件用 inject 获取状态\r\n * @returns\r\n */\r\nconst getListState = (): PageList & IState => {\r\n  return useStoreLocal<PageList & IState>(flag)\r\n}\r\n\r\nexport {\r\n  getListState,\r\n  regListState\r\n}\r\n","<template>\r\n  翻页组件\r\n  <el-pagination\r\n    small\r\n    background\r\n    layout=\"prev, pager, next\"\r\n    :total=\"50\"\r\n    :page-size=\"10\"\r\n    v-model:current-page=\"state2.pagerInfo.pagerIndex\"\r\n    class=\"mt-4\"\r\n  />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  // import type { StateGA } from '../../types/typs'\r\n\r\n  import { getListState } from './test-list'\r\n\r\n  // 获取里面定义的局部状态\r\n  const state2 = getListState()\r\n   \r\n</script>","<template>\r\n  查询组件\r\n  <el-input v-model=\"query\" placeholder=\"\"></el-input>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, watch } from 'vue'\r\n\r\n  import { getListState } from './test-list'\r\n\r\n  // 获取里面定义的局部状态\r\n  const state2 = getListState()\r\n\r\n  const query = ref<string>('')\r\n\r\n  watch(query, (txt: string) => {\r\n    state2.findValue.name = txt\r\n  })\r\n\r\n</script>","<template>\r\n  局部状态——父组件。<br><br>\r\n  在js文件里注册，父、子组件引入。<br><br>\r\n \r\n  数据：{{state2.dataList}}<br><br>\r\n  查询：{{state2.findValue}}<br><br>\r\n  页号：{{state2.pagerInfo.pagerIndex}}<br><br>\r\n  <el-button type=\"\" @click=\"state2.pagerInfo.pagerIndex++\">翻页</el-button><br>\r\n  <el-button type=\"\" @click=\"state2.$reset()\"> 重置</el-button> <br>\r\n  \r\n  <el-input\r\n    v-model=\"stateText\"\r\n    type=\"textarea\"\r\n    :autosize=\"{ minRows: 5, maxRows: 10 }\"\r\n  ></el-input>\r\n  \r\n  <hr>\r\n  <!--查询-->\r\n  <list-find></list-find><br><br>\r\n  <!--翻页-->\r\n  <list-pager></list-pager><br><br>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue'\r\n\r\n  import { regListState } from './test-list'\r\n\r\n  // 加载组件\r\n  // 翻页\r\n  import listPager from './20-pager.vue'\r\n  // 翻页\r\n  import listFind from './30-find.vue'\r\n\r\n  // 创建 js 里面定义的局部状态\r\n  const state2 = regListState()\r\n\r\n  const stateText = computed(() => JSON.stringify(state2, null , 2))\r\n   \r\n</script>"],"names":[],"mappings":"sXAQA,KAAM,GAAO,OAAO,OAAO,EAOrB,EAAe,IAAyB,CAEtC,KAAA,GAAQ,EAAsB,EAAM,CACxC,MAAO,IACE,EACL,SAAU,EACV,KAAM,CAAC,EACP,SAAU,CAAC,EACX,UAAW,CAAC,EACZ,UAAW,CAAC,EACZ,UAAW,CACT,UAAW,EACX,MAAO,GACP,WAAY,CACd,EACA,UAAW,CACT,OAAQ,GACR,IAAK,CAAC,EACN,QAAS,CAAC,EACV,KAAM,CAAC,CACT,EACA,MAAO,CAAC,CAAA,GAGZ,QAAS,CACT,EACA,QAAS,MAKD,UAAU,EAAU,GAAO,CAE/B,KAAM,GAAO,CACX,SAAU,GACV,SAAU,CAAC,CACT,KAAM,2BAAS,GAAI,MAAA,EAAO,QAAQ,CAAA,CACnC,CAAA,EAGE,KAAA,SAAS,OAAS,EAAK,SACxB,GACF,MAAK,UAAU,MAAkC,EAAK,SACtD,KAAK,UAAU,WAAa,EAEhC,CACF,CAAA,EAEF,CAAE,QAAS,EAAA,CACX,EAGA,SAAM,SAAS,EAAI,EAGnB,EAAM,IAAM,EAAM,UAAU,WAAY,IAAM,CAC5C,EAAM,SAAS,CAAA,CAChB,EAGK,EAAA,EAAM,UAAW,IAAM,CAC3B,EAAM,SAAS,EAAI,CAAA,CACpB,EAEM,CACT,EAMM,EAAe,IACZ,EAAiC,CAAI,kDCpE5C,KAAM,GAAS,0cCRf,KAAM,GAAS,IAET,EAAQ,EAAY,EAAE,EAEtB,SAAA,EAAO,AAAC,GAAgB,CAC5B,EAAO,UAAU,KAAO,CAAA,CACzB,24BCkBD,KAAM,GAAS,IAET,EAAY,EAAS,IAAM,KAAK,UAAU,EAAQ,KAAO,CAAC,CAAC"}