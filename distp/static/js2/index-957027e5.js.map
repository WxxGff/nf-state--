{"version":3,"mappings":"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","names":["_sfc_main","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_3","_createBlock","_createVNode","_hoisted_2","_mergeProps","store","stateLog","BaseArray","BaseObject","_createTextVNode","_toDisplayString","FolderOpened","Document","ElementPlus"],"sources":["../../../vite/modulepreload-polyfill","../../../plugin-vue:export-helper","../../../src/App.vue","../../../lib/_store.ts","../../../lib/base/_log.ts","../../../lib/base/base-array.ts","../../../lib/base/assign.ts","../../../lib/base/base-object.ts","../../../lib/object-reactive.ts","../../../lib/object-state.ts","../../../src/store-nf/state.ts","../../../src/views/home.vue","../../../src/router/index.ts","../../../src/main.ts"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","\nexport default (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n}\n","<script lang=\"ts\">\r\n  import { defineComponent, ref } from 'vue'\r\n  import { ElContainer, ElHeader, ElFooter, ElAside, ElMain, ElSwitch } from 'element-plus'\r\n  import { useRouter } from '@naturefw/ui-core'\r\n  \r\n  export default defineComponent({\r\n    components: {\r\n      ElContainer,\r\n      ElHeader,\r\n      ElFooter,\r\n      ElAside,\r\n      ElMain,\r\n      ElSwitch\r\n    },\r\n    setup () {\r\n      const itemProps = {\r\n        'inline-prompt': true,\r\n        'active-text': '多',\r\n        'inactive-text': '单',\r\n        'active-color': '#378FEB',\r\n        'inactive-color': '#EA9712'\r\n      }\r\n\r\n      const isTabs = ref<boolean>(true)\r\n\r\n      const router = useRouter()\r\n\r\n      const myselect = (index, indexPath) => {\r\n        console.log('select-外面', index, indexPath)\r\n        // 验证权限，如果没有权限，加载登录\r\n        // router.currentRoute.paths = ''\r\n        // router.currentRoute.key = ''\r\n      }\r\n\r\n      return {\r\n        myselect,\r\n        isTabs,\r\n        itemProps\r\n      }\r\n    }\r\n  })\r\n</script>\r\n\r\n<template>\r\n  <el-container>\r\n    <el-header>\r\n      <!--导航-->\r\n      <div style=\"float: left;\">\r\n        <!--写网站logo、标题等-->\r\n        <h1>nf-state 轻量级状态管理</h1>\r\n      </div>\r\n      <div style=\"float: right;min-width: 100px;height: 40px;padding-top: 3px;\">\r\n        <!--写网站logo、标题等-->\r\n        <el-switch v-model=\"isTabs\" v-bind=\"itemProps\"></el-switch>\r\n      </div>\r\n      <div style=\"float: right;min-width: 600px;height: 60px;\">\r\n        <!--网站导航-->\r\n      </div>\r\n    </el-header>\r\n    <el-container>\r\n      <el-aside width=\"230px\">\r\n        <!--菜单 -->\r\n        <nf-menu @select=\"myselect\"/>\r\n      </el-aside>\r\n      <el-container>\r\n        <el-main>\r\n          <!--编辑区域  -->\r\n          <nf-router-view v-if=\"!isTabs\"></nf-router-view>\r\n          <nf-router-view-tabs v-if=\"isTabs\"></nf-router-view-tabs>\r\n        </el-main>\r\n      </el-container>\r\n    </el-container>\r\n    <el-footer>Footer</el-footer>\r\n  </el-container>\r\n</template>\r\n\r\n<style>\r\nbody {\r\n  background-color:#f3e8d7;\r\n}\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: left;\r\n  color: #2c3e50;\r\n  background-color: #f5f2ed;\r\n  margin: 0px;\r\n}\r\n.el-header{\r\n  background-color: #959a9e;\r\n  color: #f5f2ed;\r\n  text-align: left;\r\n}\r\n.el-footer {\r\n  background-color: #7e8285;\r\n  color: #f5f2ed;\r\n  text-align: left;\r\n}\r\n\r\n.el-aside {\r\n  background-color: #6c747c;\r\n  color: var(--el-text-color-primary);\r\n  text-align: left;\r\n  min-height: 700px;\r\n}\r\n\r\n.el-main {\r\n  background-color: #f5f2ed;\r\n  color: var(--el-text-color-primary);\r\n  text-align: left;\r\n  padding: 5px;\r\n  min-height: 700px;\r\n}\r\n</style>\r\n","import type { InjectionKey } from 'vue'\r\n\r\nimport {\r\n  readonly,\r\n  isReactive,\r\n  provide,\r\n  inject\r\n} from 'vue'\r\n\r\n// 获取类型\r\nimport type {\r\n  StateOption,\r\n  IState,\r\n  Store,\r\n  StateCreateListOption,\r\n  StateCreateOption\r\n} from './types/type'\r\n\r\n// 获取 两种状态形式，带 getter、actions，纯 state的两种。\r\nimport { stateReactive, stateOnly } from './main'\r\n\r\n// provide 的标记，全局状态用\r\nconst _storeFlag = Symbol('__nf-state__') as InjectionKey<string>\r\n\r\n// 内部使用的状态集合，普通对象，如果用 reactive，那么把readonly存入，取出来就变成了 reactive\r\n// const _stateList = reactive({})\r\nconst _stateList: Store = {}\r\nconst _retList: Store = {}\r\n\r\n// 返回给出外部的状态容器，shallowReactive 类型，还是不行\r\nexport const store: Store = _stateList\r\n// const store = shallowReadonly(_stateList)\r\n\r\n/**\r\n * 单独定义状态，可以是全局状态，也可以是局部状态\r\n * @param id 标识（string | symbol），全局状态不能重名；局部状态可以重名。\r\n * @param info StateCreateOption 状态描述：state、getter、action，或者 reactive、readonly\r\n * * info：\r\n * * 一：reactive、readonly，直接存入状态\r\n * * 二：含有getter或则action -- 使用子类的实例\r\n * * 三：对象（无state属性）--直接视为 state，不设置 getter 和 action\r\n * * 四：只有state属性，-- 使用基类的实例，同上\r\n * @param options StateOption 配置选项\r\n * * options：\r\n * * * isLocal: true - 局部；* false - 全局\r\n * * * level：number，安全等级，\r\n * * * * 1：宽松（都行）；\r\n * * * * 2：一般（不能直接改属性）；\r\n * * * * 3：严格（仅action）；\r\n * * * * 4：超严（指定组件）\r\n * * * isLog：true - 做记录； * false - 不用做记录\r\n */\r\nexport function defineStore<T> (id: string | symbol | InjectionKey<string>, info: StateCreateOption | any, options?: StateOption): T & IState {\r\n  // 默认，全局状态\r\n  const isLocal = (options?.isLocal)?? false\r\n\r\n  // 变更状态的安全级别\r\n  const _level = (options?.level) ? options.level : 1\r\n\r\n  // 判断ID是否重复\r\n  if (isLocal) {\r\n    // 局部状态，可以重复\r\n  } else {\r\n    // 全局状态，ID 如果重复 返回ID对应的状态\r\n    if (_stateList[id]) {\r\n      return _stateList[id]\r\n    }\r\n  }\r\n\r\n  // 创建状态\r\n  let tmp = null\r\n  // info === reactive ，直接作为状态\r\n  if (isReactive(info)) {\r\n    //\r\n    tmp = info\r\n  } else {\r\n    // 有 getter 或则 action，使用 stateReactive\r\n    if (info.getters || info.actions) {\r\n      // 挂载\r\n      tmp = stateReactive(id, info, options)\r\n    } else {\r\n      // 没有 state属性的话，info 视为 state\r\n      const _state = (info.state) ? info.state : info\r\n      tmp = stateOnly(id, _state, options)\r\n    }\r\n  }\r\n  \r\n  // 如果只读，套上 readonly \r\n  const re = (_level === 1) ?  tmp : readonly(tmp) \r\n  \r\n  // 判断是否全局状态\r\n  if (isLocal) {\r\n    // 局部状态，使用 provide 注入\r\n    provide<T>(id, re)\r\n  } else {\r\n    // 全局状态，存入容器\r\n    _stateList[id] = re\r\n  }\r\n  if (_level === 4) {\r\n    return tmp\r\n  } else {\r\n    return re\r\n  }\r\n}\r\n\r\n/**\r\n * 创建全局状态。\r\n * @param info 状态列表，多个状态\r\n */\r\nexport function createStore(info: StateCreateListOption) {\r\n  // 获取状态列表\r\n  const _store = info.store\r\n  \r\n  // 遍历，调用 defineStore 注册状态\r\n  Object.keys(_store).forEach(key => {\r\n    const __state = _store[key]\r\n    // 处理 options \r\n    const options = __state.options ? __state.options : {\r\n      isLocal: false, // 全局状态\r\n      isLog: false, // 不写日志\r\n      level: 1 // 可以随便改状态\r\n    }\r\n\r\n    if (__state.state) {\r\n      _retList[key] = defineStore(key, __state, options)\r\n    } else {\r\n      if (isReactive(__state)) {\r\n        _retList[key] = defineStore(key, __state, options)\r\n      } else {\r\n        _retList[key] = defineStore(key, { state: __state }, options)\r\n      }\r\n    }\r\n  })\r\n\r\n  // 创建完毕，调用回调\r\n  if (typeof info.init === 'function') {\r\n    info.init(_retList)\r\n  }\r\n\r\n  // 安装插件\r\n  return (app: any) => {\r\n    // 设置模板直接使用状态\r\n    app.config.globalProperties.$state = _stateList\r\n    // 发现个问题，这是个object，不用注入到 provide\r\n    app.provide(_storeFlag, store)\r\n  }\r\n}\r\n\r\n/**\r\n * 获取全局状态。implements IState\r\n * @param id 全局状态 的 ID，string | symbol\r\n * @returns 指定的状态\r\n */\r\nexport function useStore<T> (id: string | symbol | InjectionKey<string>): T & IState {\r\n  // const re = inject(_storeFlag) ?? store\r\n  const re = inject<Store>(_storeFlag) ?? store\r\n\r\n  if (re[id]) {\r\n    return re[id]\r\n  }\r\n  console.error('没有找到这个状态：', id)\r\n  return null\r\n}\r\n\r\n/**\r\n * 获取局部状态\r\n * @param id 状态的ID\r\n * @returns 局部状态\r\n */\r\nexport function useStoreLocal<T> (id: string | symbol | InjectionKey<string>): T & IState {\r\n  const re = inject<T>(id)\r\n  return re \r\n}\r\n","\r\nimport { isReactive, reactive } from 'vue'\r\nimport type { InjectionKey } from 'vue'\r\n\r\n// 加载日志类型\r\nimport type { StateLog } from '../types/type'\r\n\r\n// 深层赋值的函数\r\nimport { deepClone } from './assign'\r\n\r\n/**\r\n * 记录状态的变化日志，用key来区分\r\n * * stateLog = {\r\n * *  key: {\r\n * *   log: [\r\n * *     {\r\n * *       time: '时间戳',\r\n * *       kind: '', // 操作类型\r\n * *       oldValue: {},\r\n * *       newValue: {},\r\n * *       subValue: {}, // 参数\r\n * *       callFun: '' // 调用的函数名\r\n * *     }\r\n * *   ]\r\n * *  }\r\n * * }\r\n */\r\nconst stateLog = reactive<StateLog>({})\r\n\r\n /**\r\n  * 添加一个新记录\r\n  * @param key 状态的key\r\n  * @param kind 操作类型\r\n  * @param oldVal 原值\r\n  * @param newVal 新值\r\n  * @param subVal 参数，比如 patch\r\n  * @param _stackstr stack 拆分为数组后，记录哪个元素\r\n  */\r\nfunction addLog<T> (key: string | symbol | InjectionKey<string>, kind: string, oldVal: T, newVal: T, subVal: T = {}, _stackstr?: string): void {\r\n  if (!stateLog[key]) {\r\n    stateLog[key] = {log: []}\r\n  }\r\n  if (kind === 'init') return\r\n  \r\n  // 获取调用者，如果没有传递的话，自己获取 $reset\r\n  let stackstr = _stackstr\r\n  if (!_stackstr) {\r\n    let stackIndex = 3\r\n\r\n    switch (kind) {\r\n      case '$state':\r\n        stackIndex = 5\r\n        break\r\n      case '$reset':\r\n        stackIndex = 3\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    const stack: string = new Error().stack ?? ''\r\n    const arr = stack.split('\\n')\r\n    // 记录调用的函数（组件），不支持template里触发的调用\r\n    stackstr = arr.length > stackIndex ? arr[stackIndex]: arr[arr.length - 1]\r\n  }\r\n\r\n  const _oldVal: T = isReactive(oldVal) ? deepClone({}, oldVal) : oldVal\r\n  const _newVal: T = isReactive(newVal) ? deepClone({}, newVal) : newVal\r\n  const _subVal: T = isReactive(subVal) ? deepClone({}, subVal) : subVal\r\n\r\n  stateLog[key].log.push({\r\n    time: new Date().valueOf(),\r\n    kind: kind,\r\n    oldValue: _oldVal,\r\n    newValue: _newVal,\r\n    subValue: _subVal,\r\n    callFun: stackstr // 调用的函数名\r\n  })\r\n}\r\n\r\nexport {\r\n  stateLog, // 记录容器\r\n  addLog // 添加一条记录\r\n}","\r\nimport { toRaw } from 'vue'\r\nimport type { InjectionKey } from 'vue'\r\n\r\nimport type { IState } from '../types/type'\r\n\r\n// 日志\r\nimport {\r\n  stateLog // 记录容器\r\n  // addLog // 添加一条记录\r\n} from './_log'\r\n\r\n/**\r\n * 继承 Array，做一个子类 implements IState\r\n */\r\nexport default class BaseArray extends Array implements IState {\r\n  get $id(): string | symbol | InjectionKey<string>\r\n  get $isLog(): boolean\r\n  get $_value() : any\r\n\r\n  constructor (_info?: any) {\r\n    // 调用父类的 constructor()\r\n    super()\r\n    let arr = _info\r\n    if (typeof _info === 'function') {\r\n      arr = _info()\r\n    }\r\n    // 设置初始值\r\n    if (Array.isArray(arr)) {\r\n      if (arr.length > 0) this.push(...arr)\r\n    } else {\r\n      if (arr) this.push(arr)\r\n    }\r\n  }\r\n  /**\r\n   * 获取初始值\r\n   */\r\n  // get _value() {\r\n  //  return {}\r\n  // }\r\n  /**\r\n   * 恢复初始值\r\n   */\r\n  $reset () {\r\n    if (this.$_value) {\r\n      this.length = 0\r\n      const _val = (typeof this.$_value === 'function') ? this.$_value() : this.$_value\r\n      this.push(..._val)\r\n    }\r\n  }\r\n  /**\r\n   * 没有实现功能，仅兼容 对象基类的方法\r\n   */\r\n  $patch() {\r\n    // this.splice(...arguments)\r\n  }\r\n  \r\n  /**\r\n   * 取原型，不包含内部方法\r\n   */\r\n  $toRaw<T>(): Array<T> {\r\n    const arr: Array<T> = []\r\n    const tmp = toRaw(this)\r\n    tmp.forEach(item => {\r\n      arr.push( (item.$toRaw) ? item.$toRaw() : item )\r\n    })\r\n    return arr\r\n  }\r\n\r\n  /**\r\n   * 整体替换，会清空原数组，\r\n   */\r\n  set $state(value) {\r\n    // 删除原有数据\r\n    this.length = 0\r\n    if (Array.isArray(value)) {\r\n      this.push(...value)\r\n    } else {\r\n      this.push(value)\r\n    }\r\n  }\r\n\r\n  \r\n  /**\r\n   * 给 object 加一个 forEach 的方法\r\n   */\r\n  $forEach() {}\r\n\r\n  /**\r\n   * 获取日志\r\n   */\r\n  get $log() {\r\n    if (stateLog[this.$id]) {\r\n      return stateLog[this.$id].log\r\n    } else {\r\n      return []\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清空日志\r\n   */\r\n  $clearLog() {\r\n    if (stateLog[this.$id]) {\r\n      stateLog[this.$id].log.length = 0\r\n    }\r\n  }\r\n  \r\n  // 添加类==========================================\r\n  /**\r\n   * 在开头添加，封装 unshift\r\n   * @returns 返回新数组的长度\r\n   */\r\n  pushA(...arg: Array<any>) {\r\n    return this.unshift(...arg)\r\n    // return this.unshift(...arguments)\r\n  }\r\n\r\n  /**\r\n   * 在指定位置i开始添加新元素，封装 splice\r\n   * @param i 从 0 开始的位置\r\n   * @param val 要添加的新元素\r\n   * @returns 返回新数组的长度\r\n   */\r\n  pushAt(i: number, ...arg: Array<any>) {\r\n    // console.log(arguments)\r\n    this.splice(i, 0, ...arg)\r\n  }\r\n\r\n  // 删除类==========================================\r\n  /**\r\n   * 删除第一个元素\r\n   * @returns 返回被删除的元素\r\n   */\r\n  deleteA() {\r\n    this.shift()\r\n  }\r\n\r\n  /**\r\n   * 删除从指定位置 i 开始的 n 个元素\r\n   * @param i 从 0 开始的位置\r\n   * @param n 删除多少个元素\r\n   * @returns 返回被删除的元素\r\n   */\r\n  deleteAt(i: number, n: number) {\r\n    return this.splice(i, n)\r\n  }\r\n\r\n  /**\r\n   * 删除最后一个元素\r\n   * @returns 返回被删除的元素\r\n   */\r\n  deleteZ() {\r\n    this.pop()\r\n  }\r\n\r\n  // 修改类==========================================\r\n  /**\r\n   * 交换两个数组元素的位置\r\n   * @param i1 数组下标 \r\n   * @param i2 数组下标 \r\n   */\r\n  swap(i1: number, i2: number) {\r\n    const tmp = this[i1]\r\n    this[i1] = this[i2]\r\n    this[i2] = tmp\r\n  }\r\n  // 查找类==========================================\r\n  // 其他类==========================================\r\n\r\n\r\n}\r\n","\r\nimport { toRaw } from \"vue\"\r\nimport BaseArray from \"./base-array\"\r\n\r\n/**\r\n * 深层设置属性值，保留原属性，然后覆盖新属性值 options\r\n * @param target 目标\r\n * @param _source 来源\r\n */\r\nexport function deepSet<T extends object, U extends object> (target: T, _source: U) {\r\n  // 取原型\r\n  const source = (_source.$toRaw) ? _source.$toRaw() : toRaw(_source)\r\n  // 遍历原，判断属性类型\r\n  Object.keys(source).forEach(key => {\r\n    switch(typeof source[key]) {\r\n      case 'object' :\r\n        if (Array.isArray(source[key])) {\r\n          // 数组\r\n          if (Array.isArray(target[key])) {\r\n            target[key].length = 0\r\n          } else {\r\n            target[key] = new BaseArray()\r\n          }\r\n          target[key].push(...source[key])\r\n        } else {\r\n          if (!target[key]) { // 没有定义\r\n            target[key] = {}\r\n          }\r\n          if (source[key] === null) {\r\n            target[key] = null\r\n          } else {\r\n            deepSet(target[key], source[key])\r\n          }\r\n        }\r\n        break\r\n      case 'bigint':\r\n      case 'boolean':\r\n      case 'number':\r\n      case 'string':\r\n        target[key] = source[key]\r\n        break      \r\n      default:\r\n        // 不拷贝\r\n        break\r\n    }\r\n  })\r\n  return target\r\n}\r\n\r\n/**\r\n * 深层拷贝，只拷贝数据，新对象\r\n * @param target 目标，空的\r\n * @param  _source 来源\r\n */\r\nexport function deepClone<T extends object, U extends object> (target: T, _source: U) {\r\n  // 取原型\r\n  const source = (_source.$toRaw) ? _source.$toRaw() : toRaw(_source)\r\n  // 遍历原，判断属性类型\r\n  Object.keys(source).forEach(key => {\r\n    switch(typeof source[key]) {\r\n      case 'object' :\r\n        if (Array.isArray(source[key])) {\r\n          // 数组，使用扩展的子类\r\n          target[key] = new BaseArray(source[key])\r\n          // target[key] = []\r\n          // target[key].push(...source[key])\r\n        } else {\r\n          target[key] = {}\r\n          deepClone(target[key], source[key])\r\n        }\r\n        break\r\n      case 'bigint':\r\n      case 'boolean':\r\n      case 'number':\r\n      case 'string':\r\n        target[key] = source[key]\r\n        break      \r\n      default:\r\n        // 不拷贝\r\n        break\r\n    }\r\n  })\r\n  return target\r\n}\r\n ","\r\nimport { toRaw } from 'vue'\r\nimport type { InjectionKey } from 'vue'\r\n\r\nimport type { IState } from '../types/type'\r\n\r\n// 两种深层赋值的函数\r\nimport { deepSet, deepClone } from './assign'\r\nimport BaseArray from \"./base-array\"\r\n\r\n// 日志\r\nimport {\r\n  stateLog, // 记录容器\r\n  addLog // 添加一条记录\r\n} from './_log'\r\n\r\n\r\n/**\r\n * 对象的状态的基类，提供基础功能 implements IState \r\n * * $state = {...} 整体赋值\r\n * * $patch({...}) 修改部分属性\r\n * * $reset() 恢复初始值\r\n */\r\nexport default class BaseObject implements IState {\r\n  get $id(): string | symbol | InjectionKey<string>\r\n  get $isLog(): boolean\r\n  get $_value(): any\r\n\r\n  constructor (_info: any) {\r\n    if (typeof _info === 'function') {\r\n      // state 是函数，执行\r\n      const val = _info()\r\n      Object.keys(val).forEach(key => {\r\n        const p = val[key]\r\n        if (Array.isArray(p)) {\r\n          this[key] = new BaseArray(p)\r\n        } else {\r\n          if (typeof p === 'object' && p !== null) {\r\n            this[key] = new BaseObject(p)\r\n          } else {\r\n            this[key] = p\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      // state 是对象，深考\r\n      deepClone(this, _info)\r\n    }\r\n    if (this.$isLog) {\r\n      addLog(this.$id, 'init', {}, {})\r\n    }\r\n  }\r\n  /**\r\n   * 获取初始值，需要子类实现\r\n   */\r\n  // get _value() {\r\n  //  return _initialValue\r\n  // }\r\n  \r\n  /**\r\n   * 恢复初始值\r\n   */\r\n  $reset () {\r\n    if (this) {\r\n      // 没有设置的话，就不重置了\r\n      if (!this.$_value) return\r\n      \r\n      const v = this.$_value\r\n      const newVal = (typeof v === 'function') ? v() : deepClone({}, v)\r\n\r\n      // 记录变化\r\n      if (this.$isLog) {\r\n        addLog(this.$id, '$reset', this, newVal)\r\n      }\r\n\r\n      this.$state = newVal\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 替换部分属性，支持深层\r\n   */\r\n  $patch(_val: any) {\r\n    // 判断是不是函数\r\n    const val = (typeof _val === 'function') ? _val(this) : _val\r\n\r\n    // 记录原值\r\n    let oldVal: string | any = ''\r\n    if (this.$isLog) {\r\n      oldVal = (this.$isLog) ? deepClone({}, this) : ''\r\n    }\r\n    // 改变状态\r\n    deepSet(this, val)\r\n\r\n    // 记录变化\r\n    if (this.$isLog) {\r\n      addLog(this.$id, '$patch', oldVal, this, val)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 取原型，不包含内部方法\r\n   */\r\n  $toRaw<T>(): T {\r\n    const obj: T = {}\r\n    const tmp = toRaw(this)\r\n    Object.keys(tmp).forEach(key => {\r\n      if (key !== '$id' && key !== '$isLog' && key !== '$_value' && key !== '$log') {\r\n        obj[key] = (tmp[key].$toRaw) ? tmp[key].$toRaw() : tmp[key]\r\n      }\r\n    })\r\n    return obj\r\n  }\r\n\r\n  /**\r\n   * 整体替换，会删除原有属性\r\n   */\r\n  set $state(value: any) {\r\n    // 记录原值\r\n    let oldVal = ''\r\n    if (this.$isLog) {\r\n      oldVal = (this.$isLog) ? deepClone({}, this) : ''\r\n    }\r\n\r\n    // 记录原有 属性，然后遍历新对象的属性，记录没有的属性，删除\r\n    // 记录原有属性\r\n    const oldAttr = Object.keys(this)\r\n    // 遍历新值\r\n    Object.keys(value).forEach(key => {\r\n      if (this[key]) {\r\n        if (this[key].$toRaw) {\r\n          this[key].$state = value[key]\r\n        } else {\r\n          this[key] = value[key]\r\n        }\r\n        // 去掉有的属性，剩下的就是没有的属性\r\n        const index = oldAttr.findIndex((item) => item === key)\r\n        if (index > -1) {\r\n          oldAttr.splice(index , 1)\r\n        }\r\n      } else {\r\n        // 没有 key ，增加 key\r\n        this[key] = value[key]\r\n      }\r\n    })\r\n\r\n    // 删除没有的属性\r\n    oldAttr.forEach(key => {\r\n      delete this[key]\r\n    })\r\n    \r\n    // 记录变化\r\n    if (this.$isLog) {\r\n      addLog(this.$id, '$state', oldVal, this, value)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 给 object 加一个 forEach 的方法\r\n   * @param cb 回调函数\r\n   */\r\n  $forEach(cb:(obj: any, key: string, index: number) => void): void {\r\n    if (typeof cb === 'function') {\r\n      const tmp = toRaw(this)\r\n      Object.keys(tmp).forEach((key: string, index: number) => {\r\n        if (key !== '$_value' && key !== '$id' && key !== '$isLog') {\r\n          const obj = tmp[key]\r\n          cb(obj, key, index)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取日志\r\n   */\r\n  get $log() {\r\n    if (stateLog[this.$id]) {\r\n      return stateLog[this.$id].log\r\n    } else {\r\n      return []\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清空日志\r\n   */\r\n  $clearLog() {\r\n    if (stateLog[this.$id]) {\r\n      stateLog[this.$id].log.length = 0\r\n    }\r\n  }\r\n \r\n}\r\n","\r\nimport { computed, reactive } from 'vue'\r\nimport type { InjectionKey } from 'vue'\r\nimport type { StateOption, StateCreateOption } from './types/type'\r\n\r\nimport {\r\n  BaseObject,\r\n  BaseArray,\r\n  deepClone,\r\n} from './main'\r\n\r\n// 日志\r\nimport {\r\n  // stateLog, // 记录容器\r\n  addLog // 添加一条记录\r\n} from './base/_log'\r\n\r\n/**\r\n * 创建有getter、actions 的状态\r\n * reactive 类型的状态，挂载 getter、action\r\n * @param id 状态的标志\r\n * @param info StateCreateOption state、getter、action、options\r\n * @param options StateOption 配置选项\r\n * * options：\r\n * * * isLocal: true - 局部；* false - 全局\r\n * * * level：安全等级，\r\n * * * * 1：宽松（都行）；\r\n * * * * 2：一般（不能直接改属性）；\r\n * * * * 3：严格（仅action）；\r\n * * * * 4：超严（指定组件）\r\n * * * isLog：true - 做记录； * false - 不用做记录\r\n */\r\nexport default function stateReactive (id: string | symbol | InjectionKey<string>, info: StateCreateOption, options?: StateOption = {}) {\r\n  \r\n  // 判断 state 是 object 还是 array，继承不同的基类\r\n  let tmp = null\r\n  let basec: any = null\r\n\r\n  const _state = (typeof info.state === 'function') ? info.state(): info.state\r\n  if (Array.isArray(_state)) {\r\n    // 数组\r\n    // 继承一下\r\n    class arrayClass extends BaseArray {\r\n      constructor(_info) {\r\n        super(_info) // 调用父类的constructor()\r\n      }\r\n      // 根据 options 判断，是否需要做日志\r\n      override get $isLog() {\r\n        return (!!options.isLog)\r\n      }\r\n      /**\r\n       * 获取 id\r\n       */\r\n      override get $id() {\r\n        return id\r\n      }\r\n    }\r\n    basec = arrayClass\r\n\r\n    // 创建实例\r\n    tmp = new arrayClass(info.state)\r\n  } else {\r\n    // 对象\r\n    // 继承一下\r\n    class objClass extends BaseObject {\r\n      constructor(_info: any) {\r\n        super(_info) // 调用父类的constructor()\r\n      }\r\n      // 根据 options 判断，是否需要做日志\r\n      get $isLog() {\r\n        return (!!options.isLog)\r\n      }\r\n      /**\r\n       * 获取初始值\r\n       */\r\n      get $_value() {\r\n        return info.state\r\n      }\r\n      /**\r\n       * 获取 id\r\n       */\r\n      get $id() {\r\n        return id\r\n      }\r\n    }\r\n    basec = objClass\r\n\r\n    // 创建实例\r\n    tmp = new objClass(info.state)\r\n  }\r\n\r\n  // 套上 reactive \r\n  const ret = reactive(tmp)\r\n\r\n  // 是否只读\r\n  const _level = (options.level) ? options.level : 1\r\n  if (_level === 2) {\r\n    // 子类的原型上做同名函数，内部调用 ret。\r\n    const _$patch = ret.$patch\r\n    basec.prototype.$patch = function(_val) {\r\n      _$patch.call(ret, _val)\r\n    }\r\n    \r\n    const _$reset = ret.$reset\r\n    basec.prototype.$reset = function(_val) {\r\n      _$reset.call(ret, _val)\r\n    }\r\n    \r\n    // $state 被视为 属性，被 readonly 拦截，所以只好改为函数形式\r\n    basec.prototype.$statef = function(_val) {\r\n      ret.$state = _val\r\n    }\r\n  }\r\n  // ===================\r\n\r\n  // 挂载 getters，变成 computed\r\n  if (typeof info.getters === 'object') {\r\n    Object.keys(info.getters).forEach(key => {\r\n      basec.prototype[key] = computed(() => {\r\n        // 记录原值\r\n        let oldVal = ''\r\n        if (ret.$isLog) {\r\n          oldVal = (ret.$isLog) ? deepClone({}, ret) : ''\r\n        }\r\n\r\n        const re = info.getters[key].call(ret, ret)\r\n\r\n        // 记录变化\r\n        if (ret.$isLog) {\r\n          addLog(ret.$id, `getters-${_level}-${key}`, oldVal, ret, {})\r\n        }\r\n\r\n        return re\r\n      })\r\n    })\r\n  }\r\n\r\n  // 挂载 actions\r\n  if (typeof info.actions === 'object') {\r\n    Object.keys(info.actions).forEach(key => {\r\n      basec.prototype[key] = async function (val) {\r\n        const stack = new Error().stack\r\n        const arr = stack.split('\\n')\r\n        // 记录原值\r\n        let oldVal = ''\r\n        if (ret.$isLog) {\r\n          oldVal = (ret.$isLog) ? deepClone({}, ret) : ''\r\n        }\r\n\r\n        // 判断安全级别\r\n        if (_level < 4 ) {\r\n          // 可以使用\r\n          // const promiseFlag = info.actions[key] instanceof Promise\r\n          // const isFun = !!info.actions[key].prototype 不是箭头函数\r\n\r\n          // console.log(promiseFlag)\r\n          await info.actions[key].call(ret, val, ret)\r\n        } else {\r\n          // 不可以使用\r\n          await info.actions[key].call(this, val, this)\r\n        }\r\n        // 记录变化\r\n        if (ret.$isLog) {\r\n          addLog(ret.$id, `actions-${_level}-${key}`, oldVal, ret, val, arr[2])\r\n        }\r\n      }\r\n    })\r\n  }\r\n  \r\n  return ret\r\n}","\r\n\r\nimport { reactive } from 'vue'\r\nimport type { StateOption } from './types/type'\r\nimport type { InjectionKey } from 'vue'\r\n\r\nimport {\r\n  BaseObject,\r\n  BaseArray\r\n  // deepClone\r\n} from './main'\r\n\r\n/**\r\n * 创建只有 state 的状态。\r\n * * 只有 state 的情况，直接使用 BaseObject 的实例\r\n * @param id 状态的标识\r\n * @param state state\r\n * @param options StateOption 配置选项\r\n * * * options：\r\n * * * isLocal: true - 局部；* false - 全局\r\n * * * level：安全等级，* 1：宽松（都行）；2：一般（不能直接改属性）；3：严格（仅action）；4：超严（指定组件）\r\n * * * isLog：true - 做记录； * false - 不用做记录\r\n * @returns \r\n */\r\nexport default function stateOnly (id: string | symbol | InjectionKey<string>, state: any, options?: StateOption) {\r\n  // 先看看有没有，然后再获取\r\n  // 直接使用实例\r\n  let tmp = null\r\n  const _state = (typeof state === 'function') ? state(): state\r\n  \r\n  if (Array.isArray(_state)) {\r\n    tmp = new BaseArray(state)\r\n  } else {\r\n    tmp = new BaseObject(state)\r\n  }\r\n  // 获取初始值\r\n  tmp.$_value = () => state\r\n  // 获取 id\r\n  tmp.$id = () => id\r\n  // 是否写日志\r\n  tmp.$isLog = () => (!!options.isLog)\r\n  \r\n  const ret = reactive(tmp)\r\n  \r\n  return ret\r\n}","\r\nimport { readonly } from 'vue'\r\n\r\n// 加载状态的类库\r\nimport { createStore, stateReactive } from '../../lib/main'\r\nimport type { Store, StateCreateOption } from '../../lib/types/type'\r\n\r\nimport type {\r\n  StateOnly,\r\n  StateGA,\r\n  Person\r\n} from '../types/typs'\r\n\r\n// 仅 state + 对象\r\nconst stateOnly: StateCreateOption = {\r\n  state: {\r\n    name: '只有state的状态，对象'\r\n  }\r\n}\r\n\r\n// 仅 state + 函数\r\nconst stateOnlyFun: StateCreateOption = {\r\n  state: (): StateOnly => {\r\n    return {\r\n      name: '只有state的状态，函数'\r\n    }\r\n  }\r\n}\r\n\r\n// 普通状态 + 函数\r\nconst stateGA: StateCreateOption = {\r\n  state: (): StateGA => {\r\n    return {\r\n      name: '带有getter、action 的状态',\r\n      age: 18\r\n    }\r\n  },\r\n  getters: {\r\n    getterTest() {\r\n      return this.name\r\n    }\r\n  },\r\n  actions: {\r\n    actionTest() {\r\n      this.name = 'action 修改了name' +  new Date().valueOf()\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// 普通状态 日志 异步操作\r\n\r\nconst testPromie = () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const re = {\r\n        name: '异步的方式设置name'\r\n      }\r\n      resolve(re)\r\n    }, 500)\r\n  })\r\n}\r\n\r\nconst stateLog: StateCreateOption = {\r\n  state: (): StateGA => {\r\n    return {\r\n      name: '带有getter、action 的状态',\r\n      age: 18\r\n    }\r\n  },\r\n  actions: {\r\n    actionTest() {\r\n      this.name = 'action 修改了name' +  new Date().valueOf()\r\n    },\r\n    async yibu() {\r\n      const p = await testPromie()\r\n      this.name = p.name\r\n    }\r\n  },\r\n  options: {\r\n    isLocal: false, // true：局部状态；false：全局状态（默认属性）；\r\n    isLog: true, // true：做记录；false：不用做记录（默认属性）；\r\n    /**\r\n     * 1：宽松，可以各种改变属性，适合弹窗、抽屉、多tab切换等。\r\n     * 2：一般，不能通过属性直接改状态，只能通过内置函数、action 改变状态\r\n     * 3：严格，不能通过属性、内置函数改状态，只能通过 action 改变状态\r\n     * 4：超严，只能在指定组件内改变状态，比如当前用户的状态，只能在登录组件改，其他组件完全只读\r\n    */\r\n    level: 1\r\n  }\r\n}\r\n\r\n// 自己定义的状态，套上 readonly 传入状态容器\r\nconst stateRet = stateReactive('stateRet', {\r\n  state: (): StateGA => {\r\n    return {\r\n      name: 'readonly 的状态',\r\n      age: 18\r\n    }\r\n  },\r\n  getters: {\r\n    getterTest() {\r\n      return this.name\r\n    }\r\n  },\r\n  actions: {\r\n    actionTest() {\r\n      this.name = 'action 修改了name' +  new Date().valueOf()\r\n    }\r\n  }\r\n},{})\r\n\r\nsetTimeout(() => {\r\n  stateRet.name = '内部修改' + new Date().valueOf()\r\n}, 500)\r\n\r\n/**\r\n * 统一注册全局状态\r\n */\r\nexport default createStore({\r\n  // 定义状态，直接使用 reactive\r\n  store: {\r\n    stateOnly,\r\n    stateOnlyFun,\r\n    stateGA,\r\n    stateRet: readonly(stateRet),\r\n    stateLog,\r\n    // 纯 state\r\n    user: {\r\n      state: (): Person => {\r\n        return {\r\n          isLogin: false,\r\n          name: 'jyk', //\r\n          age: 19,\r\n          info: {\r\n            a1: '对象属性',\r\n            b: {\r\n              b1: '第三成'\r\n            }\r\n          },\r\n          arr: [\r\n            {\r\n              c: {\r\n                c1: '数组1'\r\n              },\r\n              d: {\r\n                d1: '数组2'\r\n              }\r\n            }\r\n          ],\r\n          roles: ['1', '2']\r\n        }\r\n      },\r\n      actions: {\r\n        test(){\r\n          this.age ++\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 可以给全局状态设置初始状态，同步数据可以直接在上面设置，如果是异步数据，可以在这里设置。\r\n  init (store: Store) {\r\n    console.log('初始化', store)\r\n  }\r\n})\r\n","<template>\r\n  nf-state 轻量级状态管理\r\n  {{state}}<br>\r\n  <el-button @click=\"myclick\">赋值</el-button><br>\r\n  {{state2}}<br>\r\n  <el-button @click=\"myclick2\">赋值</el-button><br>\r\n  {{state3}}<br>\r\n  <el-button @click=\"myclick3\">赋值</el-button><br>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n\r\n  import { reactive, defineComponent } from 'vue'\r\n  import type { InjectionKey } from 'vue'\r\n\r\n  interface IState {\r\n    get $id(): string | symbol | InjectionKey<string>\r\n    set $state(value: any)\r\n    [key: string | number]: any\r\n  }\r\n\r\n  class BaseObject implements IState {\r\n    get $id(): string | symbol | InjectionKey<string>\r\n    name: string\r\n    age: number\r\n    readonly name2: string\r\n\r\n    constructor (name: string, age: number) {\r\n      this.name = name\r\n      this.name2 = '只读的'\r\n      this.age = age\r\n    }\r\n    \r\n    set $state(value: any) {\r\n      console.log('父类的$id', this.$id)\r\n      Object.assign(this, value)\r\n    }\r\n  }\r\n\r\n  // implements IState\r\n  class BaseArray extends Array implements IState {\r\n    get $id(): string | symbol | InjectionKey<string>\r\n   \r\n    constructor (_info?: any) {\r\n      // 调用父类的 constructor()\r\n      super()\r\n    }\r\n\r\n    set $state(value: any) {\r\n      this.length = 0\r\n      if (Array.isArray(value)) {\r\n        this.push(...value)\r\n      } else {\r\n        this.push(value)\r\n      }\r\n    }\r\n  }\r\n\r\n  function createState(id: string, name: string, age: number) {\r\n    // 继承 BaseObject 再定义一个class\r\n    class myState extends BaseObject {\r\n      constructor (name: string, age: number) {\r\n        // 调用父类的 constructor()\r\n        super(name, age)\r\n      }\r\n      // 使用 override 覆盖父类 $id\r\n      get $id() {\r\n        return id\r\n      }\r\n    }\r\n    \r\n    const _state = new myState(name, age)\r\n    const state = reactive(_state)\r\n\r\n    return state\r\n  }\r\n\r\n  export default defineComponent({\r\n    name: 'state-home',\r\n    setup() {\r\n      const _state = new BaseObject('jyk', 18)\r\n      const state = reactive(_state)\r\n\r\n      const myclick = () => {\r\n        state.$state = {\r\n          name: '直接赋值'\r\n        }\r\n      }\r\n\r\n      const _state2 = new BaseArray()\r\n      const state2 = reactive(_state2)\r\n\r\n      const myclick2 = () => {\r\n        state2.$state = [\r\n          {\r\n            name: '008'\r\n          },\r\n          {\r\n            name: '009'\r\n          }\r\n        ]\r\n        console.log(state2)\r\n      }\r\n\r\n      const state3 = createState('010', 'jyk0013', 29)\r\n      console.log(state3)\r\n      console.log('state3 - keys', Object.keys(state3))\r\n      for (const key in state3) {\r\n        console.log(key, state3[key])\r\n      }\r\n\r\n      const state4 = createState('011', 'jyk0019', 28)\r\n      console.log(state4)\r\n      console.log('state4 - keys', Object.keys(state4))\r\n      \r\n     \r\n      const myclick3 = () => {\r\n        state3.$state = {\r\n          name: '直接赋值111'\r\n        }\r\n        console.log(state3)\r\n        console.log(state4)\r\n\r\n      }\r\n\r\n      return {\r\n        myclick,\r\n        state,\r\n        myclick2,\r\n        state2,\r\n        myclick3,\r\n        state3\r\n      }\r\n\r\n    }\r\n  \r\n  })\r\n\r\n</script>","import { Document, FolderOpened } from '@element-plus/icons-vue'\r\nimport { createRouter } from '@naturefw/ui-elp'\r\n\r\nimport home from '../views/home.vue'\r\n\r\n// import list from '../views/data-list.vue'\r\n\r\n// import list from '../views/plat/p02-table.vue'\r\n\r\nconst baseUrl = (document.location.host.includes('.gitee.io')) ?\r\n  '/nf-rollup-state' :  ''\r\n\r\nexport default createRouter({\r\n  /**\r\n   * 基础路径\r\n   */\r\n  baseUrl: baseUrl,\r\n  /**\r\n   * 首页\r\n   */\r\n  home: home,\r\n\r\n  menus: [\r\n    {\r\n      menuId: '1',\r\n      title: '全局状态',\r\n      naviId: '0',\r\n      path: 'global',\r\n      icon: FolderOpened,\r\n      childrens: [\r\n        {\r\n          menuId: '1010',\r\n          title: '纯state',\r\n          path: 'state',\r\n          icon: Document,\r\n          component: () => import('../views/state-global/10-state.vue')\r\n        },\r\n        {\r\n          menuId: '1020',\r\n          title: '一般的状态',\r\n          path: 'standard',\r\n          icon: Document,\r\n          component: () => import('../views/state-global/20-standard.vue')\r\n        },\r\n        {\r\n          menuId: '1030',\r\n          title: 'reactive',\r\n          path: 'reactive',\r\n          icon: Document,\r\n          component: () => import('../views/state-global/30-reactive.vue')\r\n        },\r\n        {\r\n          menuId: '1040',\r\n          title: '日志',\r\n          path: 'log',\r\n          icon: Document,\r\n          component: () => import('../views/state-global/40-log.vue')\r\n        },\r\n        {\r\n          menuId: '1050',\r\n          title: '组件里定义',\r\n          path: 'comp-reg',\r\n          icon: Document,\r\n          component: () => import('../views/state-global/50-comp.vue')\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      menuId: '2000',\r\n      title: '局部状态',\r\n      naviId: '0',\r\n      path: 'loacl',\r\n      icon: FolderOpened,\r\n      childrens: [\r\n        {\r\n          menuId: '2010',\r\n          title: '父子组件',\r\n          path: 'parent-son',\r\n          icon: Document,\r\n          component: () => import('../views/state-loacl/10-parent.vue')\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      menuId: '5000',\r\n      title: '基类',\r\n      naviId: '0',\r\n      path: 'class',\r\n      icon: FolderOpened,\r\n      childrens: [\r\n        {\r\n          menuId: '5010',\r\n          title: '对象',\r\n          path: 'object',\r\n          icon: Document,\r\n          component: () => import('../views/state-base/10-object.vue')\r\n        },\r\n        {\r\n          menuId: '5020',\r\n          title: '数组',\r\n          path: 'array',\r\n          icon: Document,\r\n          component: () => import('../views/state-base/20-array.vue')\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      menuId: '6000',\r\n      title: '安全级别',\r\n      naviId: '0',\r\n      path: 'level',\r\n      icon: FolderOpened,\r\n      childrens: [\r\n        {\r\n          menuId: '6010',\r\n          title: '宽松',\r\n          path: 'level1',\r\n          icon: Document,\r\n          component: () => import('../views/state-level/10-level1.vue')\r\n        },\r\n        {\r\n          menuId: '6020',\r\n          title: '一般',\r\n          path: 'level2',\r\n          icon: Document,\r\n          component: () => import('../views/state-level/20-level2.vue')\r\n        },\r\n        {\r\n          menuId: '6030',\r\n          title: '严格',\r\n          path: 'level3',\r\n          icon: Document,\r\n          component: () => import('../views/state-level/30-level3.vue')\r\n        },\r\n        {\r\n          menuId: '6040',\r\n          title: '超严',\r\n          path: 'level4',\r\n          icon: Document,\r\n          component: () => import('../views/state-level/40-level4.vue')\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      menuId: '8000',\r\n      title: 'pinia',\r\n      naviId: '0',\r\n      path: 'pinia',\r\n      icon: FolderOpened,\r\n      childrens: [\r\n        {\r\n          menuId: '8010',\r\n          title: '试一试',\r\n          path: 'test',\r\n          icon: Document,\r\n          component: () => import('../views/pinia/pinia.vue')\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n})\r\n","import { createApp } from 'vue'\nimport App from './App.vue'\n\nimport store from './store-nf/state'\n\nimport { createPinia } from 'pinia'\n\nconst pinia = createPinia()\n\n// 简易路由\nimport router from './router'\n\n// UI库\nimport ElementPlus from 'element-plus'\n// import 'element-plus/lib/theme-chalk/index.css'\n// import 'dayjs/locale/zh-cn'\nimport zhCn from 'element-plus/es/locale/lang/zh-cn'\n\n// 二次封装\nimport { nfElementPlus } from '@naturefw/ui-elp'\n\ncreateApp(App)\n  .use(router)\n  .use(ElementPlus, { locale: zhCn, size: 'small' }) // UI库\n  .use(nfElementPlus) // 二次封装的组件\n  .use(store)\n  .use(pinia)\n  .mount('#app')\n"],"file":"static/js2/index-957027e5.js"}